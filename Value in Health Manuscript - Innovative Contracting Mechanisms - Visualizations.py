# -*- coding: utf-8 -*-
"""Innovative Payment Mechanisms Manuscript.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jhAEYZmUupV9OsRgrBper-P5n_MNJTvU
"""

import pandas as pd
import matplotlib.pyplot as plt

from bokeh.plotting import figure, output_notebook, output_file, show
from bokeh.models import ColumnDataSource, Legend, LabelSet
from bokeh.palettes import Category20_16

# Data for the stacked bar chart
data = {
    'contract_type': ['Quality/Outcomes-based Contracts', 'Capitation', 'Funded Initiation', 'Price-Volume Agreements', 'Portfolio Contracting', 'Subscription Plans'],
    'government': [2, 4, 1, 1, 5, 5],
    'hospital': [4, 4, 3, 4, 4, 3],
    'government_labels': ['2', '4', '1', '1', '5', '5'],
    'hospital_labels': ['4', '4', '3', '4', '4', '3'],
}

# Create a ColumnDataSource
source = ColumnDataSource(data)

# Create a figure
p = figure(
    x_range=data['contract_type'],
    y_range=(0, 15),
    title='Internal Survey of Expected Acceptability of Innovative Contracting Models for Recarbrio and Zerbaxa (n = 17)',
    toolbar_location=None,
    tools='hover',
    x_axis_label='Contract Type',
    y_axis_label='Solution Ranking',
    width=1300,
    height=600,
)

# Create the stacked bars
p.vbar_stack(
    stackers=['government', 'hospital'],
    x='contract_type',
    source=source,
    width=0.5,
    color=['#406d9c', '#cf850c'],  # Changed bar colors
    legend_label=['Government Solution Ranking', 'Hospital Solution Ranking']
)

# Add labels for the stacked bars
labels_government = LabelSet(
    x='contract_type',
    y='government',
    text='government_labels',
    y_offset=5,
    source=source,
    text_font_size='8pt',
    text_align='center',
    text_color='white'
)

labels_hospital = LabelSet(
    x='contract_type',
    y='government',
    text='hospital_labels',
    y_offset=-15,
    source=source,
    text_font_size='8pt',
    text_align='center',
    text_color='white'
)

p.add_layout(labels_government)
p.add_layout(labels_hospital)

# Add a legend
legend = p.legend[0]  # Access the first Legend item
legend.label_text_font_size = "8pt"  # Now apply styling to the legend
legend.label_text_color = "black"
legend.label_text_font_style = "italic"

# Show the plot
output_notebook()
show(p)

# Output to file
output_file('stacked_bar_chart.jpg')

from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.transform import cumsum
from bokeh.palettes import Category20c
import numpy as np
import pandas as pd



data = {'Portfolio Contracting': 31, 'Subscription Model': 29, 'Treatment Cap': 25, 'Other': 15}

x = [0]
for key, val in data.items():
  x.append(val)

data['x'] = np.array(x)
data['angle'] = data['x'].cumsum()
data['angle'] = data['angle'] / max(data['angle'])

data['color'] = Category20c[len(data)-1]

data['angle'] = data['x'].cumsum()
data['angle'] = data['angle'] / max(data['angle'])

# Convert data to a Pandas DataFrame if it's not already one
if not isinstance(data, pd.DataFrame):
    data = pd.DataFrame(data)

# Calculate start angle for the wedges
data['start_angle'] = data['angle'].shift(1).fillna(0)

source = ColumnDataSource(data=data)  # Create a ColumnDataSource for the data

p = figure(title="Contract Types", toolbar_location=None,
           tools="hover", tooltips="@x",
           x_range=(-0.5, 1), y_range=(-0.5, 1))

p.wedge(x=0, y=0, radius=0.7, start_angle='start_angle', end_angle='angle',  # Reference columns
        color='color', source=source, legend_label='x',
        line_color="white", line_width=1)

p.axis.visible = False
p.grid.visible = False

output_notebook()

show(p)

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

data = {'Portfolio Contracting': 31, 'Subscription Model': 29, 'Treatment Cap': 25, 'Other': 15}
df = pd.DataFrame(data, index = [0])

# plt.figure(figsize=(10,10))
# sns.set_theme(style="whitegrid")
# sns.barplot(x=df.columns, y=df.iloc[0])

#plt.figure(figsize=(10,10))
sns.set_theme(style="whitegrid")
# sns.barplot(x=df.columns, y=df.iloc[0])

# Create the pie chart
fig, ax = plt.subplots(figsize=(8, 8))
wedges, texts, autotexts = ax.pie(df.iloc[0], autopct='%1.1f%%', startangle=90, colors = ['#406d9c', '#cf850c', '#e0e0e0', '#ffe184'])

# Add a circle at the center to create the donut effect
centre_circle = plt.Circle((0, 0), 0.70, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)

# Equal aspect ratio ensures that pie is drawn as a circle
ax.axis('equal')
plt.title('Contract Types', fontsize = 16)
plt.legend(wedges, df.columns, title="Contract Types", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
plt.show()

import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt

# Data for the graph
data = {
    "Barrier": [
        "Measuring clinical outcomes (i.e. RWE)",
        "Alignment with approved indication and treatment guidelines (incl. updated nomenclatures)",
        "Integrated data systems (Inter/intra-institutional)",
        "Stakeholder buy-in",
        "Staff training on utilization (administrative and operational)",
        "Communication of value of the antibiotic (incl. distinction from novelty)",
        "Lack of cooperation between administrators and clinicians",
        "Coordination with diagnostic labs",
        "Initial investment"
    ],
    "AR": [1, 2, 0, 1, 0, 0, 1, 0, 1],
    "BR": [1, 1, 1, 1, 0, 0, 0, 0, 0],
    "CO": [2, 1, 2, 1, 0, 1, 0, 0, 0],
    "MX": [3, 2, 0, 2, 0, 0, 1, 0, 0]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Melt the DataFrame to long format
df_melted = df.melt(id_vars="Barrier", var_name="Group", value_name="Mentions")

# Create the stacked horizontal bar plot using seaborn
sns.barplot(x="Mentions", y="Barrier", hue="Group", data=df_melted, orient="h", ci=None)


# Set the title and labels
plt.title("Barriers to Innovative Payment Mechanisms for MDR Infection")
plt.xlabel("Number of Mentions")
plt.ylabel("Barrier")

# Set the x-axis tick values
plt.xticks(range(8))

# Show the plot
plt.show()

from bokeh.plotting import figure, output_notebook, output_file, show
from bokeh.models import ColumnDataSource, Legend, LabelSet
from bokeh.palettes import Category20_16

# Define bar colors
bar_colors = ['#406d9c', '#cf850c', '#e0e0e0', '#ffe184']

# Data for the stacked bar chart
data = {
    'Barrier': [
        'Measuring clinical outcomes',
        'Alignment with approved indication and guidelines',
        'Integrated data systems',
        'Stakeholder buy-in',
        'Staff training on utilization',
        'Communication of value of the antibiotic ',
        'Lack of cooperation between admin and clinicians',
        'Coordination with diagnostic labs',
        'Initial investment'
    ],
    'AR': [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0],
    'BR': [3.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0],
    'CO': [1.0, 1.0, 0.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0],
    'MX': [1.0, 2.0, 2.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0]
}

# Create a ColumnDataSource
source = ColumnDataSource(data)

# Create a figure
p = figure(
    x_range=data['Barrier'],
    y_range=(0, 7),  # Extend y-axis to 7
    title='Barriers to Innovative Payment Mechanisms for MDR Infection',
    toolbar_location=None,
    tools='hover',
    x_axis_label='Barrier',
    y_axis_label='Number of Mentions',
    width=2200,
    height=600,
)

# Create the stacked bars with spacing
p.vbar_stack(
    stackers=['AR', 'BR', 'CO', 'MX'],
    x='Barrier',
    source=source,
    width=0.3,  # Adjust width for spacing
    color=bar_colors,  # Use the defined bar colors
    legend_label=['AR', 'BR', 'CO', 'MX']
)

# Add a legend
legend = p.legend[0]  # Access the first Legend item
legend.label_text_font_size = "12pt"  # Now apply styling to the legend
legend.label_text_color = "black"
legend.label_text_font_style = "italic"

# Show the plot
output_notebook()
show(p)

# Output to file
output_file('stacked_bar_chart.jpg')

import matplotlib.pyplot as plt
import numpy as np

# Data (replace with your actual data)
data = {
    "Treatment Cap": {
        "Argentina": 4.0,
        "Brazil": 2.7,
        "Colombia": 3.0,
        "Mexico": 1.3
    },
    "Portfolio Contracting": {
        "Argentina": 2.7,
        "Brazil": 3.3,
        "Colombia": 2.7,
        "Mexico": 2.3
    },
    "DRG Carve-Out": {
        "Argentina": 2.0,
        "Brazil": 2.7,
        "Colombia": 2.0,
        "Mexico": 1.7
    },
    "Subscription Model": {
        "Argentina": 1.3,
        "Brazil": 1.3,
        "Colombia": 2.3,
        "Mexico": 1.7
    }
}

# Extract data for plotting
countries = list(data.keys())
mechanisms = list(data["Treatment Cap"].keys())  # Assuming all countries have the same mechanisms

# Create the figure and axes
fig, ax = plt.subplots(figsize=(18, 6))

# Define bar colors
bar_colors = ['#406d9c', '#cf850c', '#e0e0e0', '#ffe184']

# Plot the grouped bars
width = 0.2  # Width of each bar group
x = np.arange(len(countries))

for i, country in enumerate(countries):
    # Correctly access data for each country and mechanism
    values = [data[country][mechanism] for mechanism in mechanisms]
    bars = ax.bar(x + i * width, values, width, label=country, color=bar_colors[i])

    # Add data labels above each bar
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, height,
                f'{height:.1f}', ha='center', va='bottom', fontsize=10)

# Set labels and ticks
ax.set_xticks(x + width * (len(mechanisms) - 1) / 2)
ax.set_xticklabels(countries, rotation=0, ha='center')

# Set y-lim to 5
ax.set_ylim(0, 5)

# Add title and legend
ax.set_title("Ranking of Proposed Mechanisms on Feasibility")
plt.ylabel('Average Ranking')
ax.legend()

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming data is in a Pandas DataFrame
data = {
    "Country": ["Argentina", "Brazil", "Colombia", "Mexico"],
    "Premium Range": [(10, 15), (10, 20), (25, 50), (2, 20)],
    "Discount Range": [(5, 30), (15, 20), (15, 30), (5, 60)],
    "Scenario (3x SOC)": [(15, 50), (10, 30), (20, 20), (10, 30)]
}

df = pd.DataFrame(data)

fig, axs = plt.subplots(1, 3, figsize=(18, 6))  # Create a figure with 1 row and 3 columns

# Plot Premium with error bars
axs[0].errorbar(df["Country"], df["Premium Range"].apply(lambda x: (x[0] + x[1]) / 2),
                yerr=[df["Premium Range"].apply(lambda x: (x[1] - x[0]) / 2)],
                fmt='o')
axs[0].set_ylim(0, 100)  # Set y-axis limit to 100
axs[0].set_ylabel("Percent Change")  # Set y-axis label
axs[0].set_title("Premium (%) willing to pay over the current spend on a portfolio")

# Plot Discount with error bars
axs[1].errorbar(df["Country"], df["Discount Range"].apply(lambda x: (x[0] + x[1]) / 2),
                yerr=[df["Discount Range"].apply(lambda x: (x[1] - x[0]) / 2)],
                fmt='o')
axs[1].set_ylim(0, 100)  # Set y-axis limit to 100
axs[1].set_title("Discount (%) on a portfolio applied towards a novel antibiotic")

# Plot Discount with error bars
axs[2].errorbar(df["Country"], df["Scenario (3x SOC)"].apply(lambda x: (x[0] + x[1]) / 2),
                yerr=[df["Scenario (3x SOC)"].apply(lambda x: (x[1] - x[0]) / 2)],
                fmt='o')
axs[2].set_ylim(0, 100)  # Set y-axis limit to 100
axs[2].set_title("Discount (%) on a portfolio based on the 3X SOC scenario")

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Data for the graphs
brazil_data = {
    'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017],
    'private_health_expenditure': [491.01, 569.04, 540.73, 543.70, 567.59, 445.75, 456.89, 545.59],
    'public_health_expenditure': [406.14, 462.58, 416.14, 437.53, 449.41, 336.13, 345.09, 394.27]
}

colombia_data = {
    'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017],
    'private_health_expenditure': [112.60, 118.92, 139.35, 156.29, 154.63, 125.13, 123.89, 140.92],
    'public_health_expenditure': [335.48, 378.46, 403.72, 420.42, 428.43, 339.51, 318.25, 348.72]
}

mexico_data = {
    'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017],
    'private_health_expenditure': [284.47, 283.12, 289.66, 300.99, 287.67, 261.57, 233.80, 248.55],
    'public_health_expenditure': [269.51, 298.59, 308.69, 336.17, 327.67, 295.91, 257.27, 264.03]
}

argentina_data = {
    'year': [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017],
    'private_health_expenditure': [343.45, 383.49, 345.20, 322.02, 271.51, 310.60, 293.83, 413.65],
    'public_health_expenditure': [637.55, 826.64, 940.47, 957.36, 921.42, 1099.93, 857.54, 1114.44]
}

# Function to create a graph
def create_graph(data, title, y_label):
    plt.figure(figsize=(6, 4))
    plt.bar(data['year'], data['private_health_expenditure'], label='Private Health Expenditure per capita', color='gold')
    plt.bar(data['year'], data['public_health_expenditure'], bottom=data['private_health_expenditure'], label='Public Health Expenditure per capita', color='purple')
    plt.xlabel('Year')
    plt.ylabel(y_label)
    plt.title(title)
    plt.legend()
    plt.xticks(data['year'])
    plt.tight_layout()
    plt.show()

# Create graphs for each country
create_graph(brazil_data, 'Brazil\nTotal Health Expenditure per Capita, 2010 - 2017, ($)', 'USD')
create_graph(colombia_data, 'Colombia\nTotal Health Expenditure per Capita, 2010 - 2017, ($)', 'USD')
create_graph(mexico_data, 'Mexico\nTotal Health Expenditure per Capita, 2010 - 2017, ($)', 'USD')
create_graph(argentina_data, 'Argentina\nTotal Health Expenditure per Capita, 2010 - 2017, ($)', 'USD')